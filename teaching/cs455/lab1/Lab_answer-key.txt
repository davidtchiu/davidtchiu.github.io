-- Q1: Return a list of departments that are found in any 
-- building starting with “T”. Order by dept ID.
SELECT *
FROM Dept
WHERE building GLOB "T*"
order by deptID;
/*
deptID      deptName                        building
-------     --------                        --------
CSCI        School of Computer Science      Thompson Hall
MATH        Department of Mathematics       Tower of Babel
*/

-- Q2: Get all courses being taught by the MATH department that start 
-- in the afternoon. You may assume that time is in 24hr format.
SELECT *
FROM course
WHERE deptID='MATH' and meetTime>='12:00'
order by courseNum;

/*
CourseNum   deptID      CourseName  Location    meetDay     meetTime
----------  ----------  ----------  ----------  ----------  ----------
120         MATH        Algebra     MH 10       MW          12:00
230         MATH        Linear Alg  HH 308      TR          15:00
460         MATH        Calculus 3  WEY 102     TR          12:30
*/

-- Q3: Return David's course schedule. You don't have his student 
-- ID, but he's the only person with that name.
-- Only Course attributes should be projected.
SELECT deptID,CourseNum,CourseName,Location,meetDay,meetTime
FROM Course NATURAL JOIN Enroll NATURAL JOIN Student
WHERE StudentName = 'David'
ORDER BY deptID, courseNum;

/*
deptID      CourseNum   CourseName        Location    meetDay     meetTime
----------  ----------  ----------------  ----------  ----------  ----------
CSCI        351         Database Systems  TH 19       MW          12:00
CSCI        453         Capstone in Comp  TH 398      MWF         16:00
MATH        230         Linear Algebra    HH 308      TR          15:00
*/


-- Q4: Find the average GPA for each of the class ranks (freshman, 
-- sophomore, junior, senior). Rename the avg(GPA) field to ClassGPA.
SELECT class, avg(gpa) as ClassGPA
FROM Student
GROUP BY class
Order by class;

/*
class       ClassGPA
----------  ----------
Freshman    2.44
Junior      3.125
Senior      3.1
Sophomore   2.675
*/


-- Q5: Identify all students who have a lower
-- GPA than the average of his/her respective class rank. Sort the
-- results by class rank and the student's name.
WITH Tmp AS (
	SELECT avg(gpa) AS ClassGPA, class
	FROM student
	GROUP BY class)
SELECT studentID,studentName,class,gpa,ClassGPA
FROM student NATURAL JOIN Tmp
WHERE gpa < ClassGPA
ORDER BY class, studentName;

/*
studentID   studentName  class       gpa         ClassGPA
----------  -----------  ----------  ----------  ----------
1661        Logan        Freshman    0.5         2.44
1709        Cassandra    Junior      2.8         3.125
1934        Kyle         Junior      2.1         3.125
1629        Brad         Senior      1.6         3.1
1641        Brittany     Senior      2.7         3.1
1689        Gabriel      Senior      2.4         3.1
1304        Jordan       Senior      2.9         3.1
1316        Austin       Sophomore   2.1         2.675
1468        Kris         Sophomore   1.0         2.675
*/


-- Q6: Get a list of all students who are still undeclared (that is,
-- without a major). Project only the students' ID and name. Sort results
-- by the students' ID.
SELECT studentID, studentName
FROM student
WHERE studentID NOT IN (
	SELECT studentID
	FROM Major)
ORDER BY studentID;

/*
studentID   studentName
----------  -----------
1001        Lia
1225        Sarah
1282        Kelly
1629        Brad
1640        Adam
*/


-- Q7: List all departments and their student enrollments, including
-- those departments that have zero enrollment. Sort the
-- results in descending order of enrollment.
WITH DeptEnrollments AS (
	SELECT *
	FROM Dept LEFT OUTER NATURAL JOIN Enroll LEFT OUTER NATURAL JOIN Student)
SELECT deptName, count(*) as enrolled
FROM DeptEnrollments
WHERE studentID IS NOT NULL
GROUP BY deptName
UNION
SELECT deptName,0
FROM DeptEnrollments
WHERE studentID IS NULL
ORDER BY enrolled DESC;

/*
deptName                    enrolled
--------------------------  ----------
School of Computer Science  16
Department of English       8
School of Business          7
Department of Mathematics   6
Department of Physics       3
Department of Anthropology  1
Department of History       0
*/


-- Q8: Find the names, IDs, and the number of courses they are taking, 
-- for the students who are enrolled in the most number of courses.
SELECT studentID, studentName, count(studentID) as NumCourses
FROM student natural join enroll
GROUP BY studentID
HAVING NumCourses in (SELECT max(c2)
		FROM (SELECT count(studentID) as c2
				FROM enroll GROUP BY studentID));

/*
studentID   studentName  NumCourses
----------  -----------  ----------
1025        John         5
1247        Alexis       5
*/



-- Q9: Identify all honors in the major (This is a real query that
-- we have to run at the end of each year for the award ceremony!)
-- For each major, find the student(s) with the highest GPA. 
-- Sort results by major.
WITH Tmp AS (
	SELECT major, max(gpa) as highestGPA
	FROM student NATURAL JOIN major
	GROUP BY major)
SELECT studentID,studentName,class,major,gpa
FROM student NATURAL JOIN major NATURAL JOIN Tmp
WHERE student.gpa = Tmp.highestGPA
ORDER BY major;

/*
(Notice that ENGL has two students with the same GPA)

studentID   studentName  class       major       gpa
----------  -----------  ----------  ----------  ----------
1101        Haley        Senior      BUS         4.0
1381        Tiffany      Junior      CSCI        4.0
1247        Alexis       Senior      ENGL        3.9
1487        Erin         Sophomore   ENGL        3.9
1101        Haley        Senior      MATH        4.0
1510        Jordan       Freshman    PHYS        3.0
1709        Cassandra    Junior      SOAN        2.8
*/


-- Q10: The runners-up should receive a prize too! For each 
-- major, find the student(s) with the second highest GPA. (No, 
-- you may not delete from the database). Sort results by major.
-- Sort results by major.
WITH highMajorGPA AS (
	SELECT major, max(gpa) as highestGPA
	FROM student NATURAL JOIN major
	GROUP BY major),
	Valedictorians AS (
		SELECT studentID,studentName,class,major,gpa
		FROM student NATURAL JOIN major NATURAL JOIN highMajorGPA
		WHERE student.gpa = highMajorGPA.highestGPA),
	NoValedictorians AS (
		SELECT studentID,studentName,class,major,gpa
		FROM student NATURAL JOIN major
		EXCEPT
		SELECT *
		FROM Valedictorians),
	HighestNoValedictorians AS (
		SELECT major, max(gpa) as highestGPA
		FROM NoValedictorians NATURAL JOIN major
		GROUP BY major)
SELECT studentID,studentName,class,major,gpa
FROM student NATURAL JOIN major NATURAL JOIN HighestNoValedictorians
WHERE student.gpa = HighestNoValedictorians.highestGPA
ORDER BY major;
/*
studentID   studentName  class       major       gpa
----------  -----------  ----------  ----------  ----------
1782        Andrew       Sophomore   BUS         3.7
1501        Jessica      Freshman    CSCI        3.3
1025        John         Senior      ENGL        3.6
1510        Jordan       Freshman    MATH        3.0
*/



-- Q11: You found a vulnerability to the Students table, and because you 
-- haven't taken an Ethics course, you decide to give every CS major a 
-- 1.0 bump in their GPA. To avoid detection, no GPA can exceed 4.0, so 
-- round anything higher than a 4.0 to 4.0. This will likely take two
-- UPDATE statements. 
WITH CSers AS (
	SELECT studentID
	FROM student NATURAL JOIN Major
	WHERE major = 'CSCI')
UPDATE student
SET gpa=4.0
WHERE studentID IN CSers AND (gpa+1.0) > 4.0;

WITH CSers AS (
	SELECT studentID
	FROM student NATURAL JOIN Major
	WHERE major = 'CSCI')
UPDATE student
SET gpa=(gpa+1.0)
WHERE studentID IN CSers AND (gpa+1.0) <= 4.0;

/*
(BEFORE)
sqlite> select * from student natural join major where major='CSCI';
studentID   studentName  class       gpa         major
----------  -----------  ----------  ----------  ----------
1381        Tiffany      Junior      4.0         CSCI
1709        Cassandra    Junior      2.8         CSCI
1316        Austin       Sophomore   2.1         CSCI
1911        David        Senior      3.2         CSCI
1501        Jessica      Freshman    3.3         CSCI
1661        Logan        Freshman    0.5         CSCI

(AFTER)
sqlite> select * from student natural join major where major='CSCI';
studentID   studentName  class       gpa         major
----------  -----------  ----------  ----------  ----------
1381        Tiffany      Junior      4.0         CSCI
1709        Cassandra    Junior      3.8         CSCI
1316        Austin       Sophomore   3.1         CSCI
1911        David        Senior      4.0         CSCI
1501        Jessica      Freshman    4.0         CSCI
1661        Logan        Freshman    1.5         CSCI
*/


-- Q12: After the GPA mishap, the university now wants to add a new department, 
-- Philosophy (PHIL), which will housed in a newly constructed building 
-- called Plato's Cave. They will offer a course on PHIL 101: Ethics 
-- taught in room CAVE, and all CSCI majors are now required to take it. 
-- Add the new department, course, and enrollments. Run these statements in 
-- such a way that they cannot be broken up.

INSERT INTO Dept VALUES ('PHIL','Philosophy','Plato''s Cave');
INSERT INTO Course VALUES (101, 'PHIL', 'Ethics', 'CAVE', 'TR', '16:00');
INSERT INTO Enroll SELECT * from (SELECT courseNum,DeptID FROM Course WHERE deptID='PHIL' AND CourseNum=101), (SELECT studentID FROM Student natural join major WHERE major='CSCI');


/*
(Show the contents of the Dept, course, and enroll tables.)

sqlite> select * from dept order by deptID;
deptID      deptName            building
----------  ------------------  -------------
BUS         School of Business  McIntyre Hall
CSCI        School of Computer  Thompson Hall
ENGL        Department of Engl  Wyatt Hall
HIST        Department of Hist  Wyatt Hall
MATH        Department of Math  Tower of Babe
PHIL        Philosophy          Plato's Cave
PHYS        Department of Phys  Harned Hall
SOAN        Department of Anth  Wyatt Hall


sqlite> select * from course order by deptID,CourseNum;
CourseNum   deptID      CourseName  Location    meetDay     meetTime
----------  ----------  ----------  ----------  ----------  ----------
122         BUS         Economics   WY 30       MW          13:30
351         BUS         Finance     WY 29       TR          12:00
122         CSCI        How to Cod  TH 19       TR          12:00
351         CSCI        Database S  TH 19       MW          12:00
453         CSCI        Capstone i  TH 398      MWF         16:00
460         CSCI        Operating   TH 8        MW          14:00
520         CSCI        High Perfo  WY 307      TR          15:00
101         ENGL        How to Rea  WY 100      MWF         13:00
102         ENGL        How to Wri  WY 100      MWF         14:00
520         ENGL        Shakespear  HH 20       TR          13:00
120         MATH        Algebra     MH 10       MW          12:00
230         MATH        Linear Alg  HH 308      TR          15:00
320         MATH        Discrete M  TH 307      F           11:00
330         MATH        Trigonomet  WEY 113     TR          08:30
460         MATH        Calculus 3  WEY 102     TR          12:30
101         PHIL        Ethics      CAVE        TR          16:00
101         PHYS        How Things  HH 191      MWF         10:00
401         PHYS        Quantum Me  HH 372      TR          09:00
101         SOAN        Sociology   WY 105      MWF         08:00
102         SOAN        Sociology   WY 205      MTWRF       09:00


sqlite> select * from enroll order by deptID,courseNum;
CourseNum   deptID      StudentID
----------  ----------  ----------
122         BUS         1510
122         BUS         1316
122         BUS         1282
351         BUS         1510
351         BUS         1661
351         BUS         1025
351         BUS         1304
351         CSCI        1282
351         CSCI        1510
351         CSCI        1661
351         CSCI        1247
351         CSCI        1501
351         CSCI        1911
351         CSCI        1025
351         CSCI        1934
453         CSCI        1247
453         CSCI        1911
453         CSCI        1934
460         CSCI        1316
460         CSCI        1689
460         CSCI        1661
520         CSCI        1247
520         CSCI        1025
101         ENGL        1247
101         ENGL        1225
102         ENGL        1304
520         ENGL        1689
520         ENGL        1782
520         ENGL        1304
520         ENGL        1025
520         ENGL        1934
120         MATH        1101
230         MATH        1101
230         MATH        1911
230         MATH        1782
320         MATH        1247
460         MATH        1661
101         PHIL        1381
101         PHIL        1709
101         PHIL        1316
101         PHIL        1911
101         PHIL        1501
101         PHIL        1661
101         PHYS        1304
101         PHYS        1025
401         PHYS        1101
102         SOAN        1709
*/


